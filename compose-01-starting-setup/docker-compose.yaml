version: "3.8"
services: 
  mongodb:
    image: 'mongo' # 도커 컴포즈는 detached 모드, --rm 이 디폴트 ? detach가 디폴트라며...
    volumes: 
      - data:/data/db
    #environment:
    #  MONGO_INITDB_ROOT_USERNAME : max
    #  MONGO_INITDB_ROOT_PASSWORD : secret
    env_file:
      - ./env/mongo.env
    # networks: 도커는 컴포즈 파일에 특정된 모든 서비스에 대해 새 환경을 자동으로 생성하고 모든 서비스를 즉시 그 네트워크에 추가한다. 때문에 network를 직접 할당하지 않아도 된다.
  
  backend:
    build: ./backend #backend 도커 파일 상대 경로 -> 이미지 빌드 -> 컨테이너 생성
    
    # 이렇게도 가능.
    #build:
    #  context: ./backend # 이미지가 복사하는 폴더
    #  dockerfile: Dockerfile-dev

    ports:
      - '81:81'
    volumes:
      - logs:/app/logs
      - ./backend:/app #bind mounts backend - 폴더에 있는 모든 것을 컨테이너 내부의 app 폴더와 공유한다.
      - /app/node_modules #익명 볼륨
    env_file:
      - ./env/backend.env

    # docker run 명령에는 없는 키, 도커 컴포즈를 사용하면 여러 컨테이너를 한번에 생성하기 때문에 컨테이너 생성 순서를 지켜야 하는 경우가 생길 수 있다.
    # 다른 컨테이너를 의존해야하는 경우, 그 의존성을 표현할 때 사용한다. ex) api 컨테이너는 db 컨테이너를 의존.
    depends_on: 
      - mongodb

  frontend:
    build: ./frontend
    ports:
      - '3000:3000'
    volumes:
      - ./frontend/src:/app/src
    stdin_open: true
    tty: true
    depends_on:
      - backend

# 도커가 service를 위해 생성해야 하는 명명된 볼륨을 인식하기 위한 구문. - 다른 컨테이너에서도 같은 볼륨을 사용할 수 있음. bind mounts나 익명 볼륨은 작성할 필요가 없다.
volumes:
  data:
  logs: